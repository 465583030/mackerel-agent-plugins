#!/usr/bin/env perl
use 5.012;
use strict;
use warnings;
use utf8;
use Carp;

use HTTP::Tiny;
use JSON::PP;
use ExtUtils::MakeMaker qw/prompt/;

sub command {say('+ '. join ' ', @_); !system(@_) or croak $!}
sub git {unshift  @_, 'git'; goto \&command}
sub slurp {
    my $file = shift;
    do {
        local $/;
        open my $fh, '<:encoding(UTF-8)', $file or die $!;
        <$fh>
    };
}
sub spew {
    my ($file, $data) = @_;
    open my $fh, '>:encoding(UTF-8)', $file or die $!;
    $data .= "\n" if $data !~ /\n\z/ms;
    print $fh $data;
}

sub replace {
    my ($file, $code) = @_;
    my $content = $code->(slurp($file));
    spew($file, $content);
}

sub last_release {
    my @out = `git tag`;

    my ($tag) =
        reverse sort
        map {/^v([0-9]+(?:\.[0-9]+)+)$/; $1 || ()}
        map {chomp; $_} @out;
    $tag;
}

sub merged_prs {
    my $current_tag = last_release;
    my @pull_nums = map {m/Merge pull request #([0-9]+) /; $1 || ()  } `git log v$current_tag... --merges --oneline`;

    my $ret;
    my $ua = HTTP::Tiny->new;
    for my $pull_num (@pull_nums) {
        my $url = sprintf "https://api.github.com/repos/mackerelio/mackerel-agent-plugins/pulls/%d?state=closed", $pull_num;
        my $res = $ua->get($url);
        unless ($res->{success}) {
            warn "request to $url failed\n";
            next;
        }
        my $data = eval { decode_json $res->{content} };
        if ($@) {
            warn "parse json failed. url: $url\n";
            next;
        }
        my $title = $data->{title};
        $ret->{$pull_num} = {
            title => $data->{title},
            user  => $data->{user}{login},
        };
    }
    $ret;
}

sub parse_version {
    my $ver = shift;
    my ($major, $minor, $patch) = $ver =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)$/;
    ($major, $minor, $patch)
}

sub suggest_next_version {
    my $ver = shift;
    my ($major, $minor, $patch) = parse_version($ver);
    join '.', $major, ++$minor, 0;
}

sub is_valid_version {
    my $ver = shift;
    my ($major) = parse_version($ver);
    defined $major;
}

sub decide_next_version {
    my $current_version = shift;
    my $next_version = suggest_next_version($current_version);
    $next_version = prompt("next version", $next_version);

    if (!is_valid_version($next_version)) {
        die qq{"$next_version" is invalid version string\n};
    }
    if ($next_version lt $current_version) {
        die qq{"$next_version" is smaller than current version "$current_version"\n};
    }
    $next_version;
}

sub update_versions {
    my ($current_version, $next_version) = @_;

    ### update versions
    my $cur_ver_reg = quotemeta $current_version;
    # update .travis.yml
    replace '.travis.yml' => sub {
        my $content = shift;
        $content =~ s/$cur_ver_reg/$next_version/msg;
        $content;
    };

    # update rpm spec
    replace 'packaging/rpm/mackerel-agent-plugins.spec' => sub {
        my $content = shift;
        $content =~ s/^Version: $cur_ver_reg/Version: $next_version/ms;
        $content;
    };

}


sub retrieve_plugins {
    my @plugin_dirs = <mackerel-plugin-*>;
    for my $plugin_dir (@plugin_dirs) {
        my $readme = "$plugin_dir/README.md";
        unless (-f $readme) {
            warn "$readme is misssing!!!!\n";
        }
    }
    sort map {s/^mackerel-plugin-//; $_} @plugin_dirs;
}

sub update_readme {
    my @plugins = @_;

    my $doc_links = '';
    for my $plug (@plugins) {
        $doc_links .= "* [mackerel-plugin-$plug](./mackerel-plugin-$plug/README.md)\n"
    }
    replace 'README.md' => sub {
        my $readme = shift;
        my $plu_reg = qr/mackerel-plugin-[-0-9a-zA-Z_]+/;
        $readme =~ s!(?:\* \[$plu_reg\]\(\./$plu_reg/README\.md\)\n)+!$doc_links!ms;
        $readme;
    };
}

main();

sub main {
    #git qw/co master/;
    #git qw/pull/;

    my $current_version = last_release;
    my $next_version    = decide_next_version($current_version);
    update_versions($current_version, $next_version);
    my @plugins = retrieve_plugins;
    update_readme(@plugins);
}

# my $merged_prs      = merged_prs;

# TODO
# - checktout new branch
# - bump versions
# - README.md更新

